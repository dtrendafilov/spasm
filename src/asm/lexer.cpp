/* Generated by re2c 0.13.5 on Tue Jun 17 16:39:30 2008 */
#line 1 "lexer.re"
#include <iostream>

#include "lexer.hpp"

#include "token.hpp"

namespace SpasmImpl
{
	namespace ASM
	{
		//! Namespace for all lexical analisys classes
		namespace Lexer
		{

			Lexer::Lexer (std::istream & _file, size_t buff_size)
				: file (&_file), buffer_size (buff_size), state (-1), lineno (0)
			{
				buffer = new char[buffer_size];
				cursor = limit = marker = token_start = NULL;
			}

			Lexer::~Lexer ()
			{
				delete [] buffer;
			}

			bool Lexer::tokenize (TokenStream &ts)
			{
#line 42 "lexer.re"


					switch (state) {
					default: goto yy0;
					case 0: goto yyFillLabel0;
					case 1: goto yyFillLabel1;
					case 2: goto yyFillLabel2;
					case 3: goto yyFillLabel3;
					case 4: goto yyFillLabel4;
					}

				while (1) {


#line 47 "lexer.cpp"

yy0:
					state = (0);
					if ((limit - cursor) < 8) return true;
yyFillLabel0:
					yych = *cursor;
					if (yych <= '@') {
						if (yych <= ')') {
							if (yych <= '\n') {
								if (yych <= 0x00) goto yy28;
								if (yych <= 0x08) goto yy30;
								if (yych <= '\t') goto yy24;
								goto yy26;
							} else {
								if (yych <= ' ') {
									if (yych <= 0x1F) goto yy30;
									goto yy24;
								} else {
									if (yych == '%') goto yy17;
									goto yy30;
								}
							}
						} else {
							if (yych <= '-') {
								if (yych <= '*') goto yy13;
								if (yych <= '+') goto yy11;
								if (yych <= ',') goto yy30;
							} else {
								if (yych <= '/') {
									if (yych <= '.') goto yy30;
									goto yy15;
								} else {
									if (yych <= '0') goto yy4;
									if (yych <= '9') goto yy6;
									goto yy30;
								}
							}
						}
					} else {
						if (yych <= 'g') {
							if (yych <= '`') {
								if (yych <= 'Z') goto yy23;
								if (yych == '_') goto yy23;
								goto yy30;
							} else {
								if (yych <= 'c') {
									if (yych <= 'b') goto yy23;
									goto yy20;
								} else {
									if (yych <= 'd') goto yy9;
									if (yych <= 'f') goto yy23;
									goto yy19;
								}
							}
						} else {
							if (yych <= 'p') {
								if (yych == 'l') goto yy21;
								if (yych <= 'o') goto yy23;
								goto yy7;
							} else {
								if (yych <= 'r') {
									if (yych <= 'q') goto yy23;
									goto yy10;
								} else {
									if (yych <= 's') goto yy22;
									if (yych <= 'z') goto yy23;
									goto yy30;
								}
							}
						}
					}
					++cursor;
					if ((yych = *cursor) == '0') goto yy95;
#line 115 "lexer.re"
					{
				ts.push_token (Token (Token::minus, lineno));
				token_start = cursor;

				continue;
			}
#line 128 "lexer.cpp"
yy4:
					yych = *(marker = ++cursor);
					if (yych == 'X') goto yy90;
					if (yych == 'x') goto yy90;
yy5:
#line 57 "lexer.re"
					{
				ts.push_token (Token (Token::integer, lineno,
				token_start, cursor));
				token_start = cursor;

				continue;
			}
#line 142 "lexer.cpp"
yy6:
					yych = *++cursor;
					goto yy89;
yy7:
					++cursor;
					if ((yych = *cursor) <= '`') {
						if (yych <= '@') {
							if (yych <= '/') goto yy8;
							if (yych <= '9') goto yy33;
						} else {
							if (yych <= 'Z') goto yy33;
							if (yych == '_') goto yy33;
						}
					} else {
						if (yych <= 'r') {
							if (yych == 'o') goto yy76;
							if (yych <= 'q') goto yy33;
							goto yy77;
						} else {
							if (yych == 'u') goto yy78;
							if (yych <= 'z') goto yy33;
						}
					}
yy8:
#line 226 "lexer.re"
					{
				return false;
			}
#line 171 "lexer.cpp"
yy9:
					yych = *++cursor;
					if (yych <= '^') {
						if (yych <= '9') {
							if (yych <= '/') goto yy8;
							goto yy33;
						} else {
							if (yych <= '@') goto yy8;
							if (yych <= 'Z') goto yy33;
							goto yy8;
						}
					} else {
						if (yych <= 't') {
							if (yych == '`') goto yy8;
							goto yy33;
						} else {
							if (yych <= 'u') goto yy73;
							if (yych <= 'z') goto yy33;
							goto yy8;
						}
					}
yy10:
					yych = *++cursor;
					if (yych <= '^') {
						if (yych <= '9') {
							if (yych <= '/') goto yy8;
							goto yy33;
						} else {
							if (yych <= '@') goto yy8;
							if (yych <= 'Z') goto yy33;
							goto yy8;
						}
					} else {
						if (yych <= 'd') {
							if (yych == '`') goto yy8;
							goto yy33;
						} else {
							if (yych <= 'e') goto yy67;
							if (yych <= 'z') goto yy33;
							goto yy8;
						}
					}
yy11:
					++cursor;
#line 108 "lexer.re"
					{
				ts.push_token (Token (Token::plus, lineno));
				token_start = cursor;

				continue;
			}
#line 223 "lexer.cpp"
yy13:
					++cursor;
#line 122 "lexer.re"
					{
				ts.push_token (Token (Token::multiply, lineno));
				token_start = cursor;

				continue;
			}
#line 233 "lexer.cpp"
yy15:
					++cursor;
#line 129 "lexer.re"
					{
				ts.push_token (Token (Token::divide, lineno));
				token_start = cursor;

				continue;
			}
#line 243 "lexer.cpp"
yy17:
					++cursor;
#line 136 "lexer.re"
					{
				ts.push_token (Token (Token::modulus, lineno));
				token_start = cursor;

				continue;
			}
#line 253 "lexer.cpp"
yy19:
					yych = *++cursor;
					if (yych <= '^') {
						if (yych <= '9') {
							if (yych <= '/') goto yy8;
							goto yy33;
						} else {
							if (yych <= '@') goto yy8;
							if (yych <= 'Z') goto yy33;
							goto yy8;
						}
					} else {
						if (yych <= 'n') {
							if (yych == '`') goto yy8;
							goto yy33;
						} else {
							if (yych <= 'o') goto yy54;
							if (yych <= 'z') goto yy33;
							goto yy8;
						}
					}
yy20:
					yych = *++cursor;
					if (yych <= '^') {
						if (yych <= '9') {
							if (yych <= '/') goto yy8;
							goto yy33;
						} else {
							if (yych <= '@') goto yy8;
							if (yych <= 'Z') goto yy33;
							goto yy8;
						}
					} else {
						if (yych <= '`') {
							if (yych <= '_') goto yy33;
							goto yy8;
						} else {
							if (yych <= 'a') goto yy50;
							if (yych <= 'z') goto yy33;
							goto yy8;
						}
					}
yy21:
					yych = *++cursor;
					if (yych <= '_') {
						if (yych <= '@') {
							if (yych <= '/') goto yy8;
							if (yych <= '9') goto yy33;
							goto yy8;
						} else {
							if (yych <= 'Z') goto yy33;
							if (yych <= '^') goto yy8;
							goto yy33;
						}
					} else {
						if (yych <= 'n') {
							if (yych <= '`') goto yy8;
							if (yych <= 'a') goto yy41;
							goto yy33;
						} else {
							if (yych <= 'o') goto yy42;
							if (yych <= 'z') goto yy33;
							goto yy8;
						}
					}
yy22:
					yych = *++cursor;
					if (yych <= '^') {
						if (yych <= '9') {
							if (yych <= '/') goto yy8;
							goto yy33;
						} else {
							if (yych <= '@') goto yy8;
							if (yych <= 'Z') goto yy33;
							goto yy8;
						}
					} else {
						if (yych <= 's') {
							if (yych == '`') goto yy8;
							goto yy33;
						} else {
							if (yych <= 't') goto yy36;
							if (yych <= 'z') goto yy33;
							goto yy8;
						}
					}
yy23:
					yych = *++cursor;
					if (yych <= 'Z') {
						if (yych <= '/') goto yy8;
						if (yych <= '9') goto yy33;
						if (yych <= '@') goto yy8;
						goto yy33;
					} else {
						if (yych <= '_') {
							if (yych <= '^') goto yy8;
							goto yy33;
						} else {
							if (yych <= '`') goto yy8;
							if (yych <= 'z') goto yy33;
							goto yy8;
						}
					}
yy24:
					++cursor;
					yych = *cursor;
					goto yy32;
yy25:
#line 207 "lexer.re"
					{
				token_start = cursor;

				continue;
			}
#line 368 "lexer.cpp"
yy26:
					++cursor;
#line 213 "lexer.re"
					{
				++lineno;
				token_start = cursor;

				continue;
			}
#line 378 "lexer.cpp"
yy28:
					++cursor;
#line 220 "lexer.re"
					{
				ts.push_token (Token (Token::endinput, lineno));

				break;
			}
#line 387 "lexer.cpp"
yy30:
					yych = *++cursor;
					goto yy8;
yy31:
					++cursor;
					state = (1);
					if (limit <= cursor) return true;
yyFillLabel1:
					yych = *cursor;
yy32:
					if (yych == '\t') goto yy31;
					if (yych == ' ') goto yy31;
					goto yy25;
yy33:
					++cursor;
					state = (2);
					if (limit <= cursor) return true;
yyFillLabel2:
					yych = *cursor;
yy34:
					if (yych <= 'Z') {
						if (yych <= '/') goto yy35;
						if (yych <= '9') goto yy33;
						if (yych >= 'A') goto yy33;
					} else {
						if (yych <= '_') {
							if (yych >= '_') goto yy33;
						} else {
							if (yych <= '`') goto yy35;
							if (yych <= 'z') goto yy33;
						}
					}
yy35:
#line 199 "lexer.re"
					{
				ts.push_token (Token (Token::ident, lineno, token_start,
							cursor));
				token_start = cursor;

				continue;
			}
#line 429 "lexer.cpp"
yy36:
					yych = *++cursor;
					if (yych != 'o') goto yy34;
					yych = *++cursor;
					if (yych != 'r') goto yy34;
					yych = *++cursor;
					if (yych != 'e') goto yy34;
					++cursor;
					if ((yych = *cursor) <= 'Z') {
						if (yych <= '/') goto yy40;
						if (yych <= '9') goto yy33;
						if (yych >= 'A') goto yy33;
					} else {
						if (yych <= '_') {
							if (yych >= '_') goto yy33;
						} else {
							if (yych <= '`') goto yy40;
							if (yych <= 'z') goto yy33;
						}
					}
yy40:
#line 185 "lexer.re"
					{
				ts.push_token (Token (Token::store, lineno));
				token_start = cursor;

				continue;
			}
#line 458 "lexer.cpp"
yy41:
					yych = *++cursor;
					if (yych == 'b') goto yy46;
					goto yy34;
yy42:
					yych = *++cursor;
					if (yych != 'a') goto yy34;
					yych = *++cursor;
					if (yych != 'd') goto yy34;
					++cursor;
					if ((yych = *cursor) <= 'Z') {
						if (yych <= '/') goto yy45;
						if (yych <= '9') goto yy33;
						if (yych >= 'A') goto yy33;
					} else {
						if (yych <= '_') {
							if (yych >= '_') goto yy33;
						} else {
							if (yych <= '`') goto yy45;
							if (yych <= 'z') goto yy33;
						}
					}
yy45:
#line 178 "lexer.re"
					{
				ts.push_token (Token (Token::load, lineno));
				token_start = cursor;

				continue;
			}
#line 489 "lexer.cpp"
yy46:
					yych = *++cursor;
					if (yych != 'e') goto yy34;
					yych = *++cursor;
					if (yych != 'l') goto yy34;
					++cursor;
					if ((yych = *cursor) <= 'Z') {
						if (yych <= '/') goto yy49;
						if (yych <= '9') goto yy33;
						if (yych >= 'A') goto yy33;
					} else {
						if (yych <= '_') {
							if (yych >= '_') goto yy33;
						} else {
							if (yych <= '`') goto yy49;
							if (yych <= 'z') goto yy33;
						}
					}
yy49:
#line 192 "lexer.re"
					{
				ts.push_token (Token (Token::label, lineno));
				token_start = cursor;

				continue;
			}
#line 516 "lexer.cpp"
yy50:
					yych = *++cursor;
					if (yych != 'l') goto yy34;
					yych = *++cursor;
					if (yych != 'l') goto yy34;
					++cursor;
					if ((yych = *cursor) <= 'Z') {
						if (yych <= '/') goto yy53;
						if (yych <= '9') goto yy33;
						if (yych >= 'A') goto yy33;
					} else {
						if (yych <= '_') {
							if (yych >= '_') goto yy33;
						} else {
							if (yych <= '`') goto yy53;
							if (yych <= 'z') goto yy33;
						}
					}
yy53:
#line 164 "lexer.re"
					{
				ts.push_token (Token (Token::call, lineno));
				token_start = cursor;

				continue;
			}
#line 543 "lexer.cpp"
yy54:
					++cursor;
					if ((yych = *cursor) <= '_') {
						if (yych <= '@') {
							if (yych <= '/') goto yy55;
							if (yych <= '9') goto yy33;
						} else {
							if (yych <= 'Z') goto yy33;
							if (yych >= '_') goto yy33;
						}
					} else {
						if (yych <= 'f') {
							if (yych <= '`') goto yy55;
							if (yych <= 'e') goto yy33;
							goto yy57;
						} else {
							if (yych == 't') goto yy56;
							if (yych <= 'z') goto yy33;
						}
					}
yy55:
#line 157 "lexer.re"
					{
				ts.push_token (Token (Token::go, lineno));
				token_start = cursor;

				continue;
			}
#line 572 "lexer.cpp"
yy56:
					yych = *++cursor;
					if (yych == 'r') goto yy63;
					goto yy34;
yy57:
					yych = *++cursor;
					if (yych != 'a') goto yy34;
					yych = *++cursor;
					if (yych != 'l') goto yy34;
					yych = *++cursor;
					if (yych != 's') goto yy34;
					yych = *++cursor;
					if (yych != 'e') goto yy34;
					++cursor;
					if ((yych = *cursor) <= 'Z') {
						if (yych <= '/') goto yy62;
						if (yych <= '9') goto yy33;
						if (yych >= 'A') goto yy33;
					} else {
						if (yych <= '_') {
							if (yych >= '_') goto yy33;
						} else {
							if (yych <= '`') goto yy62;
							if (yych <= 'z') goto yy33;
						}
					}
yy62:
#line 150 "lexer.re"
					{
				ts.push_token (Token (Token::gofalse, lineno));
				token_start = cursor;

				continue;
			}
#line 607 "lexer.cpp"
yy63:
					yych = *++cursor;
					if (yych != 'u') goto yy34;
					yych = *++cursor;
					if (yych != 'e') goto yy34;
					++cursor;
					if ((yych = *cursor) <= 'Z') {
						if (yych <= '/') goto yy66;
						if (yych <= '9') goto yy33;
						if (yych >= 'A') goto yy33;
					} else {
						if (yych <= '_') {
							if (yych >= '_') goto yy33;
						} else {
							if (yych <= '`') goto yy66;
							if (yych <= 'z') goto yy33;
						}
					}
yy66:
#line 143 "lexer.re"
					{
				ts.push_token (Token (Token::gotrue, lineno));
				token_start = cursor;

				continue;
			}
#line 634 "lexer.cpp"
yy67:
					yych = *++cursor;
					if (yych == 'a') goto yy68;
					if (yych == 't') goto yy69;
					goto yy34;
yy68:
					yych = *++cursor;
					if (yych == 'd') goto yy71;
					goto yy34;
yy69:
					++cursor;
					if ((yych = *cursor) <= 'Z') {
						if (yych <= '/') goto yy70;
						if (yych <= '9') goto yy33;
						if (yych >= 'A') goto yy33;
					} else {
						if (yych <= '_') {
							if (yych >= '_') goto yy33;
						} else {
							if (yych <= '`') goto yy70;
							if (yych <= 'z') goto yy33;
						}
					}
yy70:
#line 171 "lexer.re"
					{
				ts.push_token (Token (Token::ret, lineno));
				token_start = cursor;

				continue;
			}
#line 666 "lexer.cpp"
yy71:
					++cursor;
					if ((yych = *cursor) <= 'Z') {
						if (yych <= '/') goto yy72;
						if (yych <= '9') goto yy33;
						if (yych >= 'A') goto yy33;
					} else {
						if (yych <= '_') {
							if (yych >= '_') goto yy33;
						} else {
							if (yych <= '`') goto yy72;
							if (yych <= 'z') goto yy33;
						}
					}
yy72:
#line 94 "lexer.re"
					{
				ts.push_token (Token (Token::read, lineno));
				token_start = cursor;

				continue;
			}
#line 689 "lexer.cpp"
yy73:
					yych = *++cursor;
					if (yych != 'p') goto yy34;
					++cursor;
					if ((yych = *cursor) <= 'Z') {
						if (yych <= '/') goto yy75;
						if (yych <= '9') goto yy33;
						if (yych >= 'A') goto yy33;
					} else {
						if (yych <= '_') {
							if (yych >= '_') goto yy33;
						} else {
							if (yych <= '`') goto yy75;
							if (yych <= 'z') goto yy33;
						}
					}
yy75:
#line 87 "lexer.re"
					{
				ts.push_token (Token (Token::dup, lineno));
				token_start = cursor;

				continue;
			}
#line 714 "lexer.cpp"
yy76:
					yych = *++cursor;
					if (yych == 'p') goto yy86;
					goto yy34;
yy77:
					yych = *++cursor;
					if (yych == 'i') goto yy82;
					goto yy34;
yy78:
					yych = *++cursor;
					if (yych != 's') goto yy34;
					yych = *++cursor;
					if (yych != 'h') goto yy34;
					++cursor;
					if ((yych = *cursor) <= 'Z') {
						if (yych <= '/') goto yy81;
						if (yych <= '9') goto yy33;
						if (yych >= 'A') goto yy33;
					} else {
						if (yych <= '_') {
							if (yych >= '_') goto yy33;
						} else {
							if (yych <= '`') goto yy81;
							if (yych <= 'z') goto yy33;
						}
					}
yy81:
#line 73 "lexer.re"
					{
				ts.push_token (Token (Token::push, lineno));
				token_start = cursor;

				continue;
			}
#line 749 "lexer.cpp"
yy82:
					yych = *++cursor;
					if (yych != 'n') goto yy34;
					yych = *++cursor;
					if (yych != 't') goto yy34;
					++cursor;
					if ((yych = *cursor) <= 'Z') {
						if (yych <= '/') goto yy85;
						if (yych <= '9') goto yy33;
						if (yych >= 'A') goto yy33;
					} else {
						if (yych <= '_') {
							if (yych >= '_') goto yy33;
						} else {
							if (yych <= '`') goto yy85;
							if (yych <= 'z') goto yy33;
						}
					}
yy85:
#line 101 "lexer.re"
					{
				ts.push_token (Token (Token::print, lineno));
				token_start = cursor;

				continue;
			}
#line 776 "lexer.cpp"
yy86:
					++cursor;
					if ((yych = *cursor) <= 'Z') {
						if (yych <= '/') goto yy87;
						if (yych <= '9') goto yy33;
						if (yych >= 'A') goto yy33;
					} else {
						if (yych <= '_') {
							if (yych >= '_') goto yy33;
						} else {
							if (yych <= '`') goto yy87;
							if (yych <= 'z') goto yy33;
						}
					}
yy87:
#line 80 "lexer.re"
					{
				ts.push_token (Token (Token::pop, lineno));
				token_start = cursor;

				continue;
			}
#line 799 "lexer.cpp"
yy88:
					++cursor;
					state = (3);
					if (limit <= cursor) return true;
yyFillLabel3:
					yych = *cursor;
yy89:
					if (yych <= '/') goto yy5;
					if (yych <= '9') goto yy88;
					goto yy5;
yy90:
					yych = *++cursor;
					if (yych <= '@') {
						if (yych <= '/') goto yy91;
						if (yych <= '9') goto yy92;
					} else {
						if (yych <= 'F') goto yy92;
						if (yych <= '`') goto yy91;
						if (yych <= 'f') goto yy92;
					}
yy91:
					cursor = marker;
					goto yy5;
yy92:
					++cursor;
					state = (4);
					if (limit <= cursor) return true;
yyFillLabel4:
					yych = *cursor;
					if (yych <= '@') {
						if (yych <= '/') goto yy94;
						if (yych <= '9') goto yy92;
					} else {
						if (yych <= 'F') goto yy92;
						if (yych <= '`') goto yy94;
						if (yych <= 'f') goto yy92;
					}
yy94:
#line 65 "lexer.re"
					{
				ts.push_token (Token (Token::xinteger, lineno,
				token_start, cursor));
				token_start = cursor;

				continue;
			}
#line 846 "lexer.cpp"
yy95:
					++cursor;
					yych = *cursor;
					goto yy5;
#line 230 "lexer.re"

				}
				return true;
			}

			/*!
			** Fills up the buffer when neccessary.
			** Note the buffer is always filled to the maximum, not just the
			** number of bytes neccessary for the lexer to continue.
			**
			** \param nbytes	- the number of bytes
			*/

			void Lexer::buffer_grow (size_t new_size)
			{
				char *new_buffer = new char[new_size];

				std::copy (buffer, limit, new_buffer);

				token_start = new_buffer + (token_start - buffer);
				cursor = new_buffer + (cursor - buffer);
				limit = new_buffer + new_size;

				buffer_size = new_size;

				delete [] buffer;
				buffer = new_buffer;
			}

			void Lexer::read (size_t nbytes)
			{
				if (token_start + nbytes > limit) { // we need larger buffer
					buffer_grow (token_start - buffer + nbytes);
				}

				std::copy (token_start, limit, buffer);
				cursor -= token_start - buffer;
				char *old_limit = limit - (token_start - buffer);
				token_start = buffer;

				file->read (old_limit, limit - old_limit);
				if (file->eof ()) {
					size_t bytes = file->gcount ();
					std::fill (old_limit + bytes, limit, 0);
				}
			}

			void Lexer::buffer_init ()
			{
				file->read (buffer, buffer_size);
				if (file->eof ()) {
					size_t bytes = file->gcount ();
					std::fill (buffer + bytes, buffer + buffer_size, 0);
				}

				cursor = marker = token_start = buffer;
				limit = buffer + buffer_size;
			}


		}	// namespace Lexer

	}	// namespace ASM
}	// namespace SpasmImpl

